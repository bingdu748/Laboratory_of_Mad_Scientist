name: Generate GitBlog README

on:
  workflow_dispatch:
  issues:
    types: [opened, edited, closed, reopened, labeled, unlabeled]
  issue_comment:
    types: [created, edited, deleted]
  push:
    branches:
      - master
    paths:
      - main.py
env:
  GITHUB_NAME: bingdu748
  GITHUB_EMAIL: 502487460@qq.com

jobs:
  sync:
    name: Generate README
    runs-on: ubuntu-latest
    if: github.event_name != 'issues' || github.repository_owner_id == github.event.issue.user.id
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
          cache: pip
          cache-dependency-path: "requirements.txt"

      - name: 调试环境变量
        run: |
          echo "当前工作目录: $(pwd)"
          echo "GitHub仓库: ${{ github.repository }}"
          echo "事件名称: ${{ github.event_name }}"
          echo "仓库所有者: ${{ github.repository_owner }}"
          echo "分支名称: ${{ github.ref }}"
          echo "issue编号: ${{ github.event.issue.number || '未设置' }}"
          # 不要输出secrets的实际值，只检查是否存在
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GITHUB_TOKEN 存在"
          fi
          if [ -n "${{ secrets.C_P }}" ]; then
            echo "C_P secret 存在"
          fi
          # 列出当前目录内容
          ls -la
          # 显示requirements.txt内容
          cat requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          # 显示已安装的包
          pip list

      - name: Generate new md
        run: |
          source venv/bin/activate
          # 运行main.py并显示详细日志
          set -x  # 启用命令回显
          python -u main.py ${{ secrets.GITHUB_TOKEN || secrets.C_P }} ${{ github.repository }} --issue_number '${{ github.event.issue.number || '' }}' 2>&1 | tee main.py.log
          set +x  # 禁用命令回显
          # 检查命令是否成功执行
          if [ $? -ne 0 ]; then
            echo "main.py执行失败，显示日志内容："
            cat main.py.log
            exit 1
          fi
          # 显示生成的文件
          ls -la
          # 如果README.md存在，显示其前几行
          if [ -f README.md ]; then
            echo "README.md前10行内容："
            head -n 10 README.md
          fi

      - name: Push README and changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加所有可能修改的文件
          git add BACKUP/*.md README.md
          
          # 检查是否有任何更改
          if git diff --quiet --staged; then
            echo "没有需要提交的更改"
          else
            echo "检测到更改，准备提交..."
            git status
            git commit -m "自动更新README和issue备份文件 - 触发事件: ${{ github.event_name }}" 
            echo "提交成功，准备推送..."
            git push || {
              echo "推送失败，尝试使用--force选项..."
              git push --force || echo "强制推送也失败"
            }
          fi
          
          # 显示最终状态
          echo "推送完成，当前分支状态："
          git status
