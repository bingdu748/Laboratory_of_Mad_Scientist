name: Generate README

on:
  issues:
    types: [opened, edited, labeled, unlabeled, closed]
  issue_comment:
    types: [created, edited, deleted]
  push:
    branches:
      - master
    paths-ignore:
      - "README.md"
      - "feed.xml"
      - "BACKUP/**"

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. 设置Python环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      # 3. 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub

      # 4. 生成README和备份Issues
      - name: Generate content
        id: generate
        run: |
          # 执行main.py生成内容
          python main.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }}
          
          # 检查是否有文件更改
          if git diff --exit-code README.md feed.xml BACKUP/ 2>/dev/null; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "没有文件变更，跳过提交"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "检测到文件变更，准备提交"
          fi

      # 5. 只在有更改时执行git操作
      - name: Commit and push changes
        if: steps.generate.outputs.changed == 'true'
        run: |
          # 配置Git用户信息
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加文件并提交
          git add README.md feed.xml BACKUP/
          git commit -m "Auto-update README and backup issues"
          
          # 推送更改到master分支
          git push origin HEAD:master
          
          # 尝试更新backup分支（如果存在）
          if git rev-parse --verify backup 2>/dev/null; then
            echo "更新backup分支..."
            git checkout backup
            git merge master --no-edit || echo "合并失败，但继续执行"
            git push origin backup
            git checkout master
          else
            echo "backup分支不存在，创建新分支..."
            git checkout -b backup
            git push -u origin backup
            git checkout master
          fi
