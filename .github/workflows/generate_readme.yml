name: Generate README

on:
  issues:
    types: [opened, edited, labeled, unlabeled, closed]
  issue_comment:
    types: [created, edited, deleted]
  push:
    branches:
      - master
    paths-ignore:
      - "README.md"
      - "feed.xml"
      - "BACKUP/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史，确保能够切换分支
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub

      - name: Generate README and Backup Issues
        run: |
          # 执行main.py，它会：
          # 1. 备份所有issue到BACKUP目录
          # 2. 按标签分类更新README.md
          # 3. 生成RSS feed
          # 4. 自动将备份推送到backup分支
          python main.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }}

      - name: Push changes to master
        run: |
          # 确保使用正确的用户信息
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加所有更改的文件
          git add README.md feed.xml BACKUP/**
          
          # 检查是否有更改需要提交
          git status
          if git diff-index --quiet HEAD --; then
            echo "没有更改需要提交到master分支"
          else
            # 提交更改到master分支
            git commit -m "Auto-update README.md, feed.xml and backup issues"
            git push origin master
          fi

      - name: Push changes to backup branch
        run: |
          # 检查backup分支是否存在，如果不存在则创建
          if ! git rev-parse --verify backup 2>/dev/null; then
            echo "backup分支不存在，正在创建..."
            git branch backup
          fi
          
          # 切换到backup分支
          git checkout backup
          
          # 添加BACKUP目录
          git add BACKUP/**
          
          # 尝试提交更改
          git status
          if git diff-index --quiet HEAD --; then
            echo "没有更改需要提交到backup分支"
          else
            git commit -m "Backup issues - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          fi
          
          # 推送到backup分支
          git push origin backup
          
          # 切换回master分支
          git checkout master
